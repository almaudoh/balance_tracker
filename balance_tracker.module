<?php

/**
 * @file
 * The .module file for the Balance Tracker module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements of hook_user_view_alter().
 */
function balance_tracker_user_view_alter(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  $current_user = \Drupal::currentUser();
  if (\Drupal::config('balance_tracker.settings')->get('show_in_profile') && $build['#view_mode'] == 'full') {
    if (($account->id() == $current_user->id() && $current_user->hasPermission('view own balance')) || $current_user->hasPermission('view all balances')) {
      $balance = balance_tracker_format_currency(\Drupal::service('balance_tracker.storage')->getBalance($account->id()));
      $build['user_balance'] = array(
        '#type' => 'item',
        '#markup' => '<h4 class="label">' . t('Current Balance') . '</h4> ' . $balance,
        'link' => [
          '#type' => 'link',
          '#title' => t('View full balance sheet'),
          '#url' => new Url('balance_tracker.user_balance', ['user' => $account->id()]),
          '#prefix' => '<p>',
          '#suffix' => '</p>',
        ],
      );
    }
  }
}

/**
 * Returns the user's balance sheet items in table format.
 *
 * @param int $from
 *   The timestamp marking the beginning of the period for which we are retrieving balance items.
 * @param int $to
 *   The timestamp marking the end of the period for which we are retrieving balance items.
 * @param int $uid
 *   The uid of the user to display the balance sheet for. If $uid is not provided,
 *   the user making the request is assumed.
 *
 * @return array
 *   A table render array.
 */
function balance_tracker_balance_table($from, $to, $uid) {
  $records = \Drupal::service('balance_tracker.storage')->getItemsRange($uid, 25, $from, $to);
  // Format the records from the DB before we display them.
  $rows = array();
  $date_type = \Drupal::config('balance_tracker.settings')->get('date_format');
  $custom_format = \Drupal::config('balance_tracker.settings')->get('custom_date_format');
  foreach ($records as $record) {
    $record = (array) $record;
    // Get our date and time settings.
    $record['timestamp'] = format_date($record['timestamp'], $date_type, $custom_format);

    // Format the currency as needed.
    $record['balance'] = balance_tracker_format_currency($record['balance']);

    // Add class names to credits and debits so we can color them.
    if ($record['type'] == 'debit') {
      $record['amount'] = new FormattableMarkup('<span class="debit">-@amount</span>', ['@amount' => balance_tracker_format_currency($record['amount'])]);
    }
    elseif ($record['type'] == 'credit') {
      $record['amount'] = new FormattableMarkup('<span class="credit">@amount</span>', ['@amount' => balance_tracker_format_currency($record['amount'])]);
    }

    unset($record['type']);
    $rows[] = $record;
  }

  $header = array(
    'timestamp' => array('data' => t('Time')),
    'message' => array('data' => t('Message')),
    'amount' => array('data' => t('Amount')),
    'balance' => array('data' => t('Balance')),
  );

  return [
    '#type' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#caption' => t("@user's Balance", array('@user' => User::load($uid)->getDisplayname())),
    '#sticky' => TRUE,
    '#empty' => t('There are no balance items for this user.'),
    '#attached' => [
      'library' => ['balance_tracker/balance_table'],
    ],
  ];
}

/**
 * Function to format a currency according to the admin settings.
 *
 * @param float $value
 *   A float containing the currency value to be displayed.
 *
 * @return string
 *   A string with the formatted currency.
 */
function balance_tracker_format_currency($value) {
  $config = \Drupal::config('balance_tracker.settings');
  $symbol = $config->get('currency_symbol');
  $position = $config->get('currency_symbol_position');
  $thousands_separator = $config->get('thousands_separator');
  $decimal_separator = $config->get('decimal_separator');

  $number = number_format($value, 2, $decimal_separator, $thousands_separator);

  if ($position == 'before') {
    return $symbol . $number;
  }
  else {
    return $number . $symbol;
  }
}
